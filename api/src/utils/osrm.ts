/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * `bunx openapi-typescript ./osrm-openapi.yaml -o ./osrm.ts`
 * https://github.com/1papaya/osrm-openapi/blob/master/osrm-openapi.yaml
 */
export interface OSRM {
  "/nearest/{version}/{profile}/{coordinate}.json": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["nearest"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/route/{version}/{profile}/{coordinates}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["route"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/table/{version}/{profile}/{coordinates}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["table"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trip/{version}/{profile}/{coordinates}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["trip"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ApiResponse: {
      /** @enum {string} */
      code:
        | "Ok"
        | "InvalidUrl"
        | "InvalidService"
        | "InvalidVersion"
        | "InvalidOptions"
        | "InvalidQuery"
        | "InvalidValue"
        | "NoSegment"
        | "TooBig"
        | "NoRoute"
        | "NoTable"
        | "NotImplemented"
        | "NoTrips";
      message?: string;
      /** Format: date-time */
      data_version?: string;
    };
    NearestResponse: components["schemas"]["ApiResponse"] & {
      waypoints?: components["schemas"]["NearestWaypoint"][];
    };
    RouteResponse: components["schemas"]["ApiResponse"] & {
      waypoints?: components["schemas"]["Waypoint"][];
      routes?: components["schemas"]["Route"][];
    };
    TableResponse: components["schemas"]["ApiResponse"] & {
      /** @description array of arrays that stores the matrix in row-major order. durations[i][j] gives the travel time from the i-th waypoint to the j-th waypoint. Values are given in seconds. */
      durations?: number[][];
      distances?: number[][];
      sources?: components["schemas"]["Waypoint"][];
      destinations?: components["schemas"]["Waypoint"][];
      fallback_speed_cells?: number[][];
    };
    TripResponse: components["schemas"]["ApiResponse"] & {
      waypoints?: components["schemas"]["TripWaypoint"][];
      trips?: components["schemas"]["Route"][];
    };
    Route: {
      /**
       * Format: float
       * @description The distance traveled by the route, in float meters.
       */
      distance?: number;
      /**
       * Format: float
       * @description The estimated travel time, in float number of seconds.
       */
      duration?: number;
      geometry?: Record<string, never>;
      /** Format: float */
      weight?: number;
      weight_name?: string;
      legs?: components["schemas"]["RouteLeg"][];
    };
    RouteLeg: {
      /**
       * Format: float
       * @description The distance traveled by the route, in float meters.
       */
      distance?: number;
      /**
       * Format: float
       * @description The estimated travel time, in float number of seconds.
       */
      duration?: number;
      /** Format: float */
      weight?: number;
      summary?: string;
      steps?: components["schemas"]["RouteStep"][];
      annotation?: components["schemas"]["Annotation"];
    };
    RouteStep: {
      /**
       * Format: float
       * @description The distance traveled by the route, in float meters.
       */
      distance?: number;
      /**
       * Format: float
       * @description The estimated travel time, in float number of seconds.
       */
      duration?: number;
      geometry?: Record<string, never>;
      /** Format: float */
      weight?: number;
      name?: string;
      ref?: string;
      pronunciation?: string;
      destinations?: Record<string, never>;
      exits?: Record<string, never>;
      mode?: string;
      maneuver?: components["schemas"]["StepManeuver"];
      intersections?: components["schemas"]["Intersection"][];
      rotary_name?: string;
      rotary_pronunciation?: string;
      /** @enum {string} */
      driving_side?: "left" | "right";
    };
    Annotation: {
      /** @description The distance, in metres, between each pair of coordinates */
      distance?: number[];
      /** @description The duration between each pair of coordinates, in seconds */
      duration?: number[];
      datasources?: number[];
      nodes?: number[];
      weight?: number[];
      speed?: number[];
      metadata?: {
        datasource_names?: string[];
      };
    };
    StepManeuver: {
      location?: number[];
      bearing_before?: number;
      bearing_after?: number;
      type?: string;
      modifier?: string;
      exit?: number;
    };
    Intersection: {
      location?: number[];
      bearings?: number[];
      classes?: string[];
      entry?: Record<string, never>[];
      in?: number;
      out?: number;
      lanes?: components["schemas"]["Lane"][];
    };
    Lane: {
      indications?: string[];
      valid?: boolean;
    };
    Waypoint: {
      name?: string;
      location?: number[];
      /** Format: float */
      distance?: number;
      hint?: string;
    };
    NearestWaypoint: components["schemas"]["Waypoint"] & {
      nodes?: number[];
    };
    TripWaypoint: components["schemas"]["Waypoint"] & {
      trips_index?: number;
      waypoint_index?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  nearest: {
    parameters: {
      query: {
        /** @description Limits the search to segments with given bearing in degrees towards true north in clockwise direction. */
        bearings?: string;
        /** @description Limits the search to given radius in meters. */
        radiuses?: string;
        /** @description Adds a Hint to the response which can be used in subsequent requests, see hints parameter. */
        generate_hints?: boolean;
        /** @description Hint from previous request to derive position in street network. */
        hints?: string;
        /** @description Keep waypoints on curb side. */
        approaches?: string;
        /** @description Additive list of classes to avoid, order does not matter. */
        exclude?: string;
        /** @description Number of nearest segments that should be returned. */
        number: number;
      };
      header?: never;
      path: {
        /** @description Version of the protocol implemented by the service. v1 for all OSRM 5.x installations */
        version: string;
        /** @description Mode of transportation, is determined statically by the Lua profile that is used to prepare the data using osrm-extract. Typically car, bike or foot if using one of the supplied profiles. */
        profile: string;
        coordinate: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NearestResponse"];
        };
      };
      /** @description Error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  route: {
    parameters: {
      query?: {
        /** @description Limits the search to segments with given bearing in degrees towards true north in clockwise direction. */
        bearings?: string;
        /** @description Limits the search to given radius in meters. */
        radiuses?: string;
        /** @description Adds a Hint to the response which can be used in subsequent requests, see hints parameter. */
        generate_hints?: boolean;
        /** @description Hint from previous request to derive position in street network. */
        hints?: string;
        /** @description Keep waypoints on curb side. */
        approaches?: string;
        /** @description Additive list of classes to avoid, order does not matter. */
        exclude?: string;
        /** @description Search for alternative routes. Passing a number alternatives=n searches for up to n alternative routes. */
        alternatives?: boolean | number;
        /** @description Returned route steps for each route leg */
        steps?: boolean;
        /** @description Returns additional metadata for each coordinate along the route geometry. */
        annotations?:
          | true
          | false
          | "nodes"
          | "distance"
          | "duration"
          | "datasources"
          | "weight"
          | "speed";
        /** @description Returned route geometry format (influences overview and per step) */
        geometries?: "polyline" | "polyline6" | "geojson";
        /** @description Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. */
        overview?: "simplified" | "full" | false;
        /** @description Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile. */
        continue_straight?: "default" | true | false;
        /** @description Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. */
        waypoints?: string;
      };
      header?: never;
      path: {
        /** @description Version of the protocol implemented by the service. v1 for all OSRM 5.x installations */
        version: string;
        /** @description Mode of transportation, is determined statically by the Lua profile that is used to prepare the data using osrm-extract. Typically car, bike or foot if using one of the supplied profiles. */
        profile: string;
        coordinates: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RouteResponse"];
        };
      };
      /** @description Error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  table: {
    parameters: {
      query?: {
        /** @description Limits the search to segments with given bearing in degrees towards true north in clockwise direction. */
        bearings?: string;
        /** @description Limits the search to given radius in meters. */
        radiuses?: string;
        /** @description Adds a Hint to the response which can be used in subsequent requests, see hints parameter. */
        generate_hints?: boolean;
        /** @description Hint from previous request to derive position in street network. */
        hints?: string;
        /** @description Keep waypoints on curb side. */
        approaches?: string;
        /** @description Additive list of classes to avoid, order does not matter. */
        exclude?: string;
        /** @description Use location with given index as source. */
        sources?: string;
        /** @description Use location with given index as destination. */
        destinations?: string;
      };
      header?: never;
      path: {
        /** @description Version of the protocol implemented by the service. v1 for all OSRM 5.x installations */
        version: string;
        /** @description Mode of transportation, is determined statically by the Lua profile that is used to prepare the data using osrm-extract. Typically car, bike or foot if using one of the supplied profiles. */
        profile: string;
        coordinates: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TableResponse"];
        };
      };
      /** @description Error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  trip: {
    parameters: {
      query?: {
        /** @description Limits the search to segments with given bearing in degrees towards true north in clockwise direction. */
        bearings?: string;
        /** @description Limits the search to given radius in meters. */
        radiuses?: string;
        /** @description Adds a Hint to the response which can be used in subsequent requests, see hints parameter. */
        generate_hints?: boolean;
        /** @description Hint from previous request to derive position in street network. */
        hints?: string;
        /** @description Keep waypoints on curb side. */
        approaches?: string;
        /** @description Additive list of classes to avoid, order does not matter. */
        exclude?: string;
        /** @description Returned route is a roundtrip (route returns to first location) */
        roundtrip?: boolean;
        /** @description Returned route starts at any or first coordinate */
        source?: "any" | "first";
        /** @description Returned route ends at any or last coordinate */
        destination?: "any" | "last";
        /** @description Returned route instructions for each trip */
        steps?: boolean;
        /** @description Returns additional metadata for each coordinate along the route geometry. */
        annotations?:
          | "true"
          | "false"
          | "nodes"
          | "distance"
          | "duration"
          | "datasources"
          | "weight"
          | "speed";
        /** @description Returned route geometry format (influences overview and per step) */
        geometries?: "polyline" | "polyline6" | "geojson";
        /** @description Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. */
        overview?: "simplified" | "full" | "false";
      };
      header?: never;
      path: {
        /** @description Version of the protocol implemented by the service. v1 for all OSRM 5.x installations */
        version: string;
        /** @description Mode of transportation, is determined statically by the Lua profile that is used to prepare the data using osrm-extract. Typically car, bike or foot if using one of the supplied profiles. */
        profile: string;
        coordinates: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TripResponse"];
        };
      };
      /** @description Error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
}
