/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * `bunx openapi-typescript ./openapi.json -o ./photon.ts`
 * https://github.com/komoot/photon/issues/550
 */
export interface Photon {
  "/api": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get coordinates for address */
    get: operations["geocoding"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reverse": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get address for coordinates */
    get: operations["reverse"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get service status */
    get: operations["status"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    PhotonFeature: {
      type: "Feature";
      geometry: {
        type: "Point";
        coordinates: number[];
      };
      properties: {
        /** Format: int32 */
        osm_id: number;
        osm_type: string;
        extent?: number[];
        country?: string;
        osm_key?: string;
        city?: string;
        osm_value?: string;
        postcode?: string;
        name?: string;
        state?: string;
        street?: string;
        housenumber?: string;
      };
    };
    PhotonFeatureCollection: {
      type: "FeatureCollection";
      features: components["schemas"]["PhotonFeature"][];
    };
    Status: {
      /** @example Ok */
      status?: string;
      /** @example 2024-06-02T01:01:31Z */
      import_date?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  geocoding: {
    parameters: {
      query: {
        /** @example Salzburg */
        q: string;
        /** @example 10 */
        location_bias_scale?: string;
        /** @example 10 */
        limit?: number;
        /** @example tourism:museum */
        osm_tag?: string;
        /** @example de */
        lang?: string;
        /** @example 13.030814 */
        lon?: number;
        /** @example 47.809487 */
        lat?: number;
        /** @example 9.5,51.5,11.5,53.5 */
        bbox?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PhotonFeatureCollection"];
        };
      };
    };
  };
  reverse: {
    parameters: {
      query: {
        /** @example 13.029354878315758 */
        lon: number;
        /** @example 47.80741178491954 */
        lat: number;
        /**
         * @description Maximum number of features
         * @example 1
         */
        limit?: number;
        /**
         * @description Maximum radius in km
         * @example 5000
         */
        radius?: number;
        /** @example true */
        distance_sort?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PhotonFeatureCollection"];
        };
      };
    };
  };
  status: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
}
